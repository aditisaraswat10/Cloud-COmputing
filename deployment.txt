#######     Setting configurations and creating cluster       ########

export PROJECT_ID="$(gcloud config get-value project -q)"
gcloud config set compute/zone europe-west2-b
gcloud container clusters create cassandra --num-nodes=3 --machine-type "n1-standard-2"


########  Creating Replication controllers for cassandra   ##########

wget -O cassandra-peer-service.yml http://tinyurl.com/yyxnephy
wget -O cassandra-service.yml http://tinyurl.com/y65czz8e
wget -O cassandra-replication-controller.yml http://tinyurl.com/y2crfsl8

kubectl create -f cassandra-peer-service.yml
kubectl create -f cassandra-service.yml
kubectl create -f cassandra-replication-controller.yml

kubectl scale rc cassandra --replicas=3



########       Creating keyspace and importing data from csv file        ########

CREATE KEYSPACE genius WITH REPLICATION = {'class' : 'SimpleStrategy', 'replication_factor' : 2};
CREATE TABLE genius.records (artists text PRIMARY KEY, songs list<text>);
COPY genius.records(artists,songs) FROM '/home/songdata.csv' WITH DELIMITER=',' AND HEADER=TRUE;



########      After copying app.py, Dockerfile, requirements.txt, server.crt,server.key(for https) to Cloud Shell          ############
-------------------

###### Building and pushing docker image        ############

docker build --tag=genius-image:1.0 .
docker tag genius-image:1.0 gcr.io/genius-cloud-project/genius-image:1.0 -tagging it with link for pushing
docker push gcr.io/genius-cloud-project/genius-image:1.0

For showing that I have pushed the image, open container registry 


#######  Creating kubernetes deployment from docker image and exposing port          #############

kubectl run genius-webapp --image=gcr.io/genius-cloud-project/genius-image:1.0 --port 8080

kubectl expose deployment genius-webapp --type=LoadBalancer --port 80 --target-port 8080